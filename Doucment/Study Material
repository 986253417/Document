address:
http://blog.backand.com/mean-vs-lamp
http://www.51wendang.com/doc/eea51c9c77cc38150cc720cc/8

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world

全栈开发之MEAN与LAMP(linux,apache,mysql,python/php)
angular
DI

NOSQL: NOSQL 精粹
键值型（Redis）
文档型(couchbase, mongodb)
列簇型(cassandra)

python with mysql 
http://downloads.mysql.com/docs/connector-python-en.pdf
https://www.ntu.edu.sg/home/ehchua/programming/sql/MySQL_Intermediate.html
design-pattern
http://www.avajava.com/tutorials/categories/design-patterns

mysql doc:
http://dev.mysql.com/doc/refman/5.7/en/integer-types.html

mysql create procedure tutorial
https://code.tutsplus.com/articles/an-introduction-to-stored-procedures-in-mysql-5--net-17843
mysql 
RENAME TABLE Syntax
alter table old_tableName RENAME new_tableName;

mysql python connector
https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html
https://dev.mysql.com/doc/connector-python/en/connector-python-examples.html
https://dev.mysql.com/doc/connector-python/en/connector-python-introduction.html


巧妙使用工具：大量重复的copy--pasete 的工作   使用工具：find--replaceALL

go Dutch AA制
It's on me. 
(我请客。) 
It's my treat. 
(我请客。) 
Be my guest. 
(我请客。) 


https://git.oschina.net/swolice/epoll.git

2016-12-15
summary
1. mysql doc (function, procedure)
2. mysql 优化 
3. 行为模式（策略模式，模板模式，状态模式）
4. robot.framework
5. java 中继承叫extend， 接口叫implement
6. 面向接口的编程 
7. DI (Funq)
8. Jenkins (CI --continous integration) 的搭建与流程
9. C++ 11 (线程thread， 语法堂，lamda, 左值右值)
10. 全栈开发（有哪些全栈开发， LAMP ， MEAN, ROR, .Net 等） 掌握一套全栈开发技能， 能够快速开发工具
11. git pro （git 简明教程）http://iissnan.com/progit/html/zh/ch1_2.html
    学习git的基本原理，框架，能够对分支进行合并和管理。
12. NoSQL 的种类
2017-01-03

1. vuforia unity3d tutorial --for AR
2. flask admin 
3. LeaderBoard ref: https://www.1and1.com/cloud-community/learn/database/redis/how-to-implement-a-simple-redis-leaderboard/
4.PowerShell
5.（objct-c）https://lianshumin.gitbooks.io/ocnotesi/content/C1/A6.html


2016-1-9
DP
gof.quanke.name
策略模式
装饰模式
观察者模式
抽象工厂-产品族和等级产品结构

git checkout -f branchName  强制不保存现分支的修改
查看网络速度windows  start task manager->networking  gbps=giga(千兆) bit per second 
2017-1-13
servicestack.redis store object （store（T））

common game concepts
http://ssdoc.asmodee.net/concepts.html

postman 
robotframework
protobuf

postman 
public static TResponse Send<TRequest,TResponse>(Uri url,TRequest request)
where TResponse : BaseResponse
where TRequest:BaseRequest
{string finalUrl = url+"?format=json";
string jsonData = JsonSerializer.SerializeObject(request);
string jsonResp = string.Empty;
using(WebClient client = new WebClient())
{
client.Headers[HttpRequestHeader.ContentType]="application/json;charset=utf-8";
jsonResp = client.UploadString(finnalUrl,jsonData);
}return JsonSerializer.DeserializeObject<TResponse>(jsonResp);


http://docs.servicestack.net/messaging

hearBeat


https://support.microsoft.com/nl-nl/help/815813/how-to-serialize-an-object-to-xml-by-using-visual-c

https://www.codeproject.com/Articles/483055/XML-Serialization-and-Deserialization-Part

Class GameStateMachine
{
/*
Called when the state machine is Launched

*/
virtual void OnEnter();
virtual void OnExit();
virtual void OnUpdate();
virtaul void Draw();
virtual void SetOwnerState();

}
2017-1-24

dynamic_cast < new_type > ( expression )		
 Safely converts pointers and references to classes up, down, and sideways along the inheritance hierarchy.


static_cast< Type* >(ptr)
https://www.pubnub.com/blog/2014-12-01-http-long-polling/

http long polling 
2017-2-4
linq query
https://msdn.microsoft.com/en-us/library/gg509017.aspx

c# shuffle a list 
List<int> list = new List<int>{1,2,3,4,5};
list = list.OrderBy(x=>Random.Next(0,list.Count)).ToList();//need assgin return to the list 
OrderBy() does not sort the IEnumerable that you input, but returns a new IOrderedEnumerable

 
You should return result from list.OrderBy(x => x.level) to the same list:

list = list.OrderBy(x => x.level).ToList();
2017-2-15
To beak the gameobjects connection to the prefab you can select the gameobject and go into the menu Gameobject -> Beak Prefab Instance.

here is a powershell script to list all installed softwares from pc:
get-wmiobject -class win32reg_addremoveprograms | select DisplayName
2017-3-1
C++ 谁负责new 谁负责delete
每个对象的结构是前一部分是基类的，后一部分是自己的， 虚表。子类向父类转型dynamic_cast
数值类型转型比如enum 转成int 使用static_cast<int>(enum);
如果一个类只是new 了但是是作为返回值供外部使用， 那么就是谁接受的地方负责释放delete.

class IBaseSkillFactory
{
public:
IBaseSkillFactory();
virtual ~IBaseSkillFactory();
virtual BaseSkill *CreateSkill(std::string name) const=0;

};//在source文件中即.cpp中要实现构造函数和析构函数，否则编译会链接出错
//using template factory to create product
template<class T> //where T: BaseSKill
class SkillFactory:public IBaseSkillFactory
{
public: 
SkillFactory();
~SkillFactory();
virtual BaseSkill * CreateSkill(std::string name) const
{
return dynamic_cast<BaseSkill *>(new T(name));
}
}；

SkillManager maintian  all SkillFatory Instance

classs SkillsManager{
public:
SkillManager();
void RegisterSkillFactory(SkillType type,const IBaseSkillFactory *skillFactory);
void UnRegisterSkillFactory(SkillType type);
BaseSkill* GetSkill(SkillType type);
~SkillManager();
Private:
BaseSkill * ResovelSkill(SkillType type);
//store factory to product produect
std::Map<int , const IBaseSkillFactory*> mSkillFactoryDic;
Std::Map<int,const BaseSkill*> mSkillDic;
}
使用new 关键字申请内存空间的时候需要assert   check 是否成功申请。
在函数的参数是传递的是指针的时候在使用前要check 是否为nullptr;

重载
覆盖是指在基类的函数中加了virtual关键字
重写是指不使用父类的同名函数，子类重新写一一个实现

递归如果没有出口，就会造成栈溢出。
2017-3-8
c# 中将string 转成枚举类型， Enum.parse(typeof(),string)
button 添加addLister后在设置button inactive 之前需要RemoveListener.

List 转成array， 使用List.ToArray()

unity 可以使用CanvasGroup 来show and hide gameobject
private CanvasGroup group = GetComponent<CanvasGroup>();
group.alpha =1; //show
group.alpha =0;//hide

2017-3-10
c++
std::Move()可以将左值转成右值，左值有名字有地址， 右值没名字也没有地址。 string存在常量区。
浅拷贝只针对基本类型，不对复杂类型。在构造函数中不能调用纯虚函数，因为在创建对象的时候会创建虚表。
c++11 --2-17-3-13
final 关键字表示class不能被继承，也不会生成虚表
default 关键字可以不用实现类的默认构函数函数或者是析构函数
delete 关键字可以移除类的默认拷贝构造函数和赋值

静态函数不能修改成员变量
std::stringstream 可以用来split 一个带空格的字符串。

c++ string类可以使用初始化列表来初始化一个对象。   string temp ={"dfdfdfba"}；
c# 实现sorted linklist 时，要一分为三， 针对first/end/middle 部分的插入与删除。
c# 中如何创建.asset 文件； 类需要继承ScriptableObject , 然后加上[CreateAssetMenu]属性给类。
2017-4-1
c# AssetsBundle使用Ienumeartor 来实现download 资源的过程， moveNext() return true , 将会继续迭代list ， moveNext() return false， 终止迭代。
protected IEnumerator Example()
{
//previos code
yield return StartCorountine(AnotherExample); //this will executed end before execute next code
//next code
}

public interface PostProcessPlayer
{
void PostProcessInput();
}
public class PandemicPlayer:PostProcessPlayer
{
//using class bind to function
void PostProcessPlayer.PostProcessInput()
{

}

}

default(T) 
default keyword will return null for reference types and zero for numeric value types.
For structs, it will return each member of the struct initialized to zero or null depending on 
whether they are value or reference types.

2017-4-5
c# 的数据类型分为两个部分： 值类型（简单类型， 结构类型， 枚举类型）和引用类型（类，数组，接口，代理delegate）。
C# 中的所有类型都是直接或间接地从Object 类中继承。
string类（字符串操作） 
Oracle virtual box  如何导入已有的.vdi 文件。 参考：http://blog.csdn.net/wanghai__/article/details/6703923
all in all 在新建虚拟电脑时 《使用已有的虚拟硬盘文件》

批量处理日文翻译
xshell 的使用
2017-4-13
c# 使用IEumerable 来一行一行的读取文件到内存而不是一次性全部读入内存， 这样会比较好
StreamReader 
StreamWriter
FileStream
判断是否读完一个文件使用while(!reader.EndOfStream)
2017-3-14
c# read json file 
1. string jsonTxt = File.ReadAllText(jsonConfigFilePath);
var jsonObj = JObject.Parse(jsonTxt);

example : InputConfig config = jsonObj["input"].ToObject<InputCOnfig>();


TCP 使用长度标识或分隔符来分割不同的request. 因为tcp 有boundary。 使用长度： 比如一个request第一个包中包含剩余整个request 的长度。第二个包包含剩余整个该接受的长度。

2017-4-17
https://msdn.microsoft.com/en-us/library/dd267312(v=vs.110).aspx

BlockingCollection<T>
Provides blocking and bounding capabilities for thread-safe collections that implement IProducerConsumerCollection<T>.

ConcurrentQueue<T>
represents a thread-safe first in-first out (FIFO) collection.

所谓线程安全是指当多个线程同时去取collection的某个元素的时候，会对element进行类似加锁的机制。 当第一个线程取到元素A的时候，元素A 被加锁其他线程是
无法获取的，这样就不会出现两个以上的线程同时去取同一个元素。这就是线程安全的， 而BlockingCollection<T> 就是线程的。 但是CocurrentQueue<T>就是不安全，
当多个线程同时去取元素A执行的时候，第二个线程去取的时候会将第一线程先取到A元素的执行cancel掉。












